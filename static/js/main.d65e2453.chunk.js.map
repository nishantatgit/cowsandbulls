{"version":3,"sources":["components/atoms/Submit/Submit.js","utils/FormRenderer/formValidator.js","utils/FormRenderer/FormRenderer.js","components/atoms/Input/Input.js","constants/gameFormFields.js","components/molecules/UserInputForm/UserInputForm.js","components/organisms/GamePanel/GamePanel.js","components/atoms/TableHeader/TableHeader.js","components/atoms/TableBody/TableBody.js","constants/content.js","components/molecules/Table/Table.js","utils/getObjectFromSequence.js","utils/compareSequenceObjects.js","utils/getResultString.js","components/organisms/ResultPanel/resultHeader.js","components/organisms/ResultPanel/ResultPanel.js","utils/generateRandomSequence.js","constants/constants.js","components/organisms/Game/Game.js","pages/Homepage/Homepage.js","index.js"],"names":["Submit","formValidator","formFields","formFieldValues","errors","forEach","ff","validate","err","value","validations","error","hasError","required","undefined","val","test","errMsg","minLength","length","maxLength","checkValue","name","fieldMapper","props","type","onChange","onBlur","label","initialValue","className","placeholder","submitCount","useState","setValue","onBlurHandler","e","useEffect","htmlFor","id","target","onChangeHandler","FormRenderer","formClass","onSubmit","validateOnSubmit","setFormFieldValues","setErrors","setSubmitCount","fieldValues","field","noValidate","preventDefault","isFormValid","formHasError","some","console","validateForm","map","formField","Component","key","defaultPrevented","UserInputForm","GamePanel","setUserInputs","TableHeader","headers","header","TableBody","rows","row","col","mainHeader","startLabel","userInputLabel","userInputName","bull","cow","result","stepLabel","guessLabel","resultLabel","congratsText","instruction","Table","data","content","resultCaption","getObjectFromSequence","seq","seqArray","split","resultObject","digit","i","push","compareSequenceObjects","a","b","aKeys","Object","keys","cows","bulls","aValue","getResultString","sequenceLength","ResultPanel","answerSequence","userInputs","callback","answerObject","setAnswerObject","userInputObject","setUserInputObject","results","setResults","userInput","resultString","resultHeader","generateRandomSequence","noOfDigits","sequence","generated","random","Math","floor","Game","updateUserInputs","setAnswerSequence","gameInProgress","setGameInProgress","gameFinished","setGameFinished","useCallback","inputValue","gameFormFields","randomSequence","constants","info","finishGame","log","onClick","HomePage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d65e2453.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Submit(props){\n    const { label, className } = props;\n    return <input className={className} type=\"submit\" value={label}  />\n}\n\nexport default Submit;","const checkValue = (value,validations) => {\n    const error = {\n        hasError: true\n    };\n\n    if(validations.required && (value === undefined || value === '' || value === null)){\n        error.errMsg = validations.required.errMsg;\n        return error;\n    }\n    if(validations.value && validations.value.val === 'number' &&  !(/^[0-9]*$/.test(value))) {\n        error.errMsg = validations.value.errMsg;\n        return error;\n    }\n    if(validations.minLength && value.length < validations.minLength.val){\n        error.errMsg = validations.minLength.errMsg;\n        return error;\n    }\n    if(validations.maxLength && value.length > validations.maxLength.val){\n        error.errMsg = validations.maxLength.errMsg;\n        return error;\n    }\n    error.hasError = false;\n    return error;\n}\n\nconst formValidator = (formFields, formFieldValues) => {\n    const errors = {};\n    formFields.forEach( ff => {\n        if(ff.validate){\n            const formValue = formFieldValues[ff.name];\n            const err = checkValue(formValue,ff.validate);\n            if(err.hasError){\n                errors[ff.name] = err;\n            }\n        }\n    });\n    return errors;\n}\n\nexport default formValidator;\n\n","import React, { useEffect, useState } from 'react';\n\nimport Input from '../../components/atoms/Input/Input';\nimport Submit from '../../components/atoms/Submit/Submit';\n\nimport formValidator from './formValidator';\n\nconst fieldMapper = {\n    'text' : Input,\n    'submit': Submit\n}\n\nfunction FormRenderer(props){\n    const { \n            formFields,  \n            id, \n            formClass, \n            onSubmit,\n            validateOnSubmit = true\n          } = props;\n\n    let [ formFieldValues, setFormFieldValues ] = useState({});\n    let [ errors, setErrors ] = useState({});\n    let [ submitCount, setSubmitCount ] = useState(0);\n\n    const validateForm = () => {\n        const errors = formValidator(formFields, formFieldValues);\n        const formHasError = formFields.some(ff => {\n            const err = errors[ff.name];\n            if(err && err.hasError){\n                return true;\n            }\n            return false;\n        })\n        setErrors({...errors});\n        if(formHasError){\n            console.error('form has errors ...');  \n            return false;\n        }\n        return true;\n    }\n\n    const setInitialValues = () => {\n        const fieldValues = {};\n        formFields.forEach(field => {\n            const { name, initialValue } = field;\n            fieldValues[name] = initialValue;\n        });\n        setFormFieldValues({...fieldValues});\n    }\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n\n        let isFormValid = true;\n\n        if(validateOnSubmit){\n            isFormValid = validateForm();\n        }\n\n        if(onSubmit && isFormValid){\n            onSubmit(formFieldValues);\n            setSubmitCount(submitCount + 1);\n        }\n    }\n\n    const onChangeHandler = (name,value) => {\n        formFieldValues[name] = value\n    }\n\n    useEffect(setInitialValues,[formFields]);\n\n    return (\n        <form id={id} className={formClass} noValidate onSubmit={onSubmitHandler}>\n            {formFields.map( formField => {\n                const { type } = formField;\n                const Component = fieldMapper[type];\n                const error = errors[formField.name];\n                return <Component \n                            onChange={onChangeHandler} \n                            {...formField}\n                            error={error} \n                            submitCount={submitCount}\n                            key={formField.name}\n                        />\n            })}\n        </form>\n    );\n}\n\nexport default FormRenderer;","import React, {useState, useEffect} from 'react';\n\nfunction Input(props){\n    const { type, onChange, onBlur, label, initialValue, className, placeholder, name, error = {}, submitCount } = props;\n    const { hasError, errMsg } = error;\n    \n    const [value, setValue ] = useState(initialValue);\n\n    const onChangeHandler = (e) => {\n        setValue(e.target.value);\n    }\n\n    const onBlurHandler = (e) => {\n        if(onBlur){\n            onBlur(value);\n        }\n    }\n\n    useEffect(\n        () => {\n            if(onChange){\n                onChange(name,value);\n            }\n        },[ value ]\n    )\n\n    useEffect(() => {\n        setValue(initialValue);\n    },[submitCount])\n\n    return  <div className=\"input-group\">\n                <label htmlFor={label}>{label}</label>\n                <input \n                    className={`${className} ${hasError ? 'error' : ''}`} \n                    type={type} \n                    id={label} \n                    onChange={e => onChangeHandler(e)}\n                    onBlur={e => onBlurHandler(e)} \n                    value={value}\n                    name={name}\n                    placeholder={placeholder}\n                />\n                { hasError && <span className=\"error\">{errMsg}</span> }\n            </div>\n}\n\nexport default Input;","export default [\n    {\n        type: 'text',\n        name: 'user-guess-input',\n        initialValue: '',\n        label: 'Enter Your Guess',\n        validate: {\n            required: { val : true, errMsg: 'Please enter some value'},\n            maxLength: { val : 4, errMsg: 'Value should not be greater than 4'},\n            minLength: { val: 4, errMsg: 'Value should not be less than 4'},\n            value: { val: 'number', errMsg: 'Value must be a number'}\n        }\n    },\n    {\n        type: 'submit',\n        label: 'Check',\n        defaultPrevented: true\n    }\n]","import React from 'react';\nimport FormRenderer from '../../../utils/FormRenderer/FormRenderer';\nimport formFields from '../../../constants/gameFormFields';\n\nimport './UserInputForm.scss';\n\nconst UserInputForm = (props) => {\n    const { onSubmit } = props;\n\n    return <FormRenderer \n                className=\"user-input-form\" \n                id=\"guess-input\" \n                formFields={formFields} \n                onSubmit={onSubmit}\n                validateOnSubmit\n            />\n}\n\nexport default UserInputForm; ","import React from 'react';\nimport UserInputForm from '../../molecules/UserInputForm/UserInputForm';\n\nimport './GamePanel.scss';\n\nconst GamePanel = (props) => {\n    const { setUserInputs } = props;\n\n    return <div className=\"game-panel\"><UserInputForm onSubmit={setUserInputs} /></div>\n}\n\nexport default GamePanel;","import React from 'react';\n\nconst TableHeader = (props) => {\n    const { headers } = props;\n    return (\n        <thead>\n            <tr>\n                {headers.map(header => <th>{header}</th>)}\n            </tr>\n        </thead>\n    );\n}\n\nexport default TableHeader;","import React from 'react';\n\nconst TableBody = (props) => {\n    const { rows } = props;\n    return <tbody>\n        {rows.map((row) => (\n      <tr key={row[0]}>\n        {row.map((col) => (\n          <td key={col}>{col}</td>\n        ))}\n      </tr>\n    ))}\n    </tbody>\n}\n\nexport default TableBody;","export default {\n    mainHeader: \"Bulls and Cows Game\",\n    startLabel: \"Start Game\",\n    userInputLabel: \"Enter your guess\",\n    userInputName: \"guess digit\",\n    bull: \"bull\",\n    cow: \"cow\",\n    result: {\n      stepLabel: \"Step\",\n      guessLabel: \"Guess\",\n      resultLabel: \"Guess Result\",\n      congratsText: \"Congratulations!! You Won. Hit Refresh to start again.\"\n    },\n    instruction: \"Click start and a random 4 digit sequence will be generataed. Guess the sequence to win the game.\"\n  };\n  ","import React from \"react\";\n\nimport TableHeader from '../../atoms/TableHeader/TableHeader';\nimport TableBody from '../../atoms/TableBody/TableBody';\nimport content from '../../../constants/content';\n\nfunction Table(props) {\n  const {\n    data: { headers, rows },\n    id\n  } = props;\n\n  return (\n    <table id={id}>\n      <caption>{content.resultCaption}</caption>\n      <TableHeader headers={headers} />\n      <TableBody rows={rows} />\n    </table>\n  );\n}\n\nexport default Table;\n","const getObjectFromSequence = (seq) => {\n    const seqArray = seq.split(\"\");\n    let resultObject = {};\n    seqArray.forEach((digit, i) => {\n      if(resultObject[digit] !== undefined){\n        resultObject[digit].push(i);\n      } else {\n        resultObject[digit] = [i];\n      }\n    });\n    return resultObject;\n  };\n  \n  export default getObjectFromSequence;\n  ","function compareSequenceObjects(a, b) {\n    const aKeys = Object.keys(a);\n    let cows = 0;\n    let bulls = 0;\n    for (let i = 0; i < aKeys.length; i++) {\n      const key = aKeys[i];\n      if (b[key] !== undefined) {\n        if (b[key].some(value => a[key].some(aValue => aValue === value))) {\n          bulls += 1;\n        } else {\n          cows += 1;\n        }\n      }\n    }\n    return {\n      cows,\n      bulls\n    };\n  }\n\n  export default compareSequenceObjects;","function getResultString(resultObject, sequenceLength = 4) {\n    const { bulls, cows } = resultObject;\n    return `${bulls} bull${bulls !== 1 ? \"s\" : \"\"} ${cows} cow${\n      cows !== 1 ? \"s\" : \"\"\n    } ${bulls === sequenceLength ? \"(Win!)\" : \"\"}`;\n  }\n  \nexport default getResultString;","export default [\n    'Step',\n    'Guess',\n    'Guess Result'\n]","import React, {  useEffect, useState } from 'react';\n\nimport Table from '../../molecules/Table/Table';\n\nimport getObjectFromSequence from '../../../utils/getObjectFromSequence';\nimport compareSequenceObjects from '../../../utils/compareSequenceObjects';\nimport getResultString from '../../../utils/getResultString';\n\nimport resultHeader from './resultHeader';\n\nimport './ResultPanel.scss';\n\nconst ResultPanel = (props) => {\n    const  { answerSequence, userInputs, callback } = props;\n    let [ answerObject, setAnswerObject ] = useState(null);\n    let [ userInputObject, setUserInputObject ] = useState(null);\n    let [ results, setResults ] = useState([]);\n\n    useEffect(() => {\n        if(answerSequence){\n            setAnswerObject(getObjectFromSequence(answerSequence))\n        }\n        \n    }, [answerSequence]);\n\n    useEffect(() => {\n        if(userInputs.length){\n            const userInput = userInputs[userInputs.length - 1];\n            setUserInputObject(getObjectFromSequence(userInput));\n        }\n    }, [userInputs]);\n\n    useEffect(() => {\n        if(userInputObject){\n            const resultObject = compareSequenceObjects(answerObject, userInputObject);\n            const resultString = getResultString(resultObject);\n            setResults([...results, [results.length + 1,userInputs[userInputs.length - 1], resultString ]]);\n            if(resultObject.bulls === 4){\n                callback();\n            }\n        }\n    }, [userInputObject])\n\n    return <div className=\"result-panel\"><Table data={{ headers: resultHeader, rows: results }} /></div> \n}\n\nexport default ResultPanel;","function generateRandomSequence(noOfDigits = 4) {\n    let sequence = \"\";\n    const generated = {};\n    for (let i = 0; i < noOfDigits; i++) {\n      let random = Math.floor(Math.random() * 10);\n  \n      // try generating random digit until it does not match\n      // from existing one\n      while (generated[random]) {\n        random = Math.floor(Math.random() * 10);\n      }\n      generated[random] = true;\n      sequence += random;\n    }\n    return sequence;\n  }\n  \n  export default generateRandomSequence;","export default {\n    sequenceLength: 4\n}","import React, { useCallback, useState, useEffect } from 'react';\n\nimport GamePanel from '../GamePanel/GamePanel';\nimport ResultPanel from '../ResultPanel/ResultPanel';\n\nimport generateRandomSequence from '../../../utils/generateRandomSequence';\nimport constants from '../../../constants/constants';\nimport gameFormFields from '../../../constants/gameFormFields';\nimport content from '../../../constants/content';\n\nimport './Game.scss';\n\nconst Game = () => {\n    const [ userInputs, updateUserInputs ] = useState([]);\n    const [ answerSequence, setAnswerSequence] = useState(null);\n    const [ gameInProgress, setGameInProgress ] = useState(false);\n    const [ gameFinished, setGameFinished ] = useState(false);\n    \n    const setUserInputs = useCallback((formFields) => {\n        const inputValue = formFields[gameFormFields[0].name];\n        updateUserInputs([...userInputs, inputValue]);\n    },[]);\n\n    useEffect(() => {\n        const randomSequence = generateRandomSequence(constants.sequenceLength);\n        console.info('randomSequence ', randomSequence);\n        setAnswerSequence(randomSequence);\n    }, []);\n\n    const startButtonHandler = () => {\n        setGameInProgress(true);\n    }\n\n    const finishGame = useCallback(()=> {\n        console.log('game finished ....');\n        setGameFinished(true);\n    },[])\n\n    return (   \n                <>\n                    { \n                        !gameInProgress && !gameFinished && (\n                            <>\n                                <button className=\"button\" onClick={startButtonHandler}>\n                                    {content.startLabel}\n                                </button>\n                                <p className=\"instruction\">{content.instruction}</p> \n                            </>\n                        ) \n                    }\n                    {\n                        gameFinished && <p>{content.result.congratsText}</p>\n                    }\n                    {\n                        gameInProgress &&  (\n                            <div className=\"game-play\">\n                                { !gameFinished && <GamePanel setUserInputs={setUserInputs} /> }\n                                { !!userInputs.length && <ResultPanel userInputs={userInputs} answerSequence={answerSequence} callback={finishGame} /> }\n                            </div>)\n                    }\n                </>\n            )\n}\n\nexport default Game;\n","import React from 'react';\n\nimport Game from '../../components/organisms/Game/Game';\n\nimport content from '../../constants/content';\n\nimport './Homepage.scss';\n\nconst HomePage = (props) => {\n    return (<main className=\"homepage\">\n        <h1 className=\"header\">{content.mainHeader}</h1>\n        <Game />\n    </main>)\n}\n\nexport default HomePage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomePage from './pages/Homepage/Homepage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HomePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}